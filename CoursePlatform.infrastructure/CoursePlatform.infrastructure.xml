<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoursePlatform.infrastructure</name>
    </assembly>
    <members>
        <member name="T:CoursePlatform.infrastructure.ApiResponseAsync`1">
            <summary>
            接口返回接口
            </summary>
            <typeparam name="T">返回的数据</typeparam>
            <remarks>
            <see cref="P:CoursePlatform.infrastructure.ApiResponse.Code"/> 小于0时表示接口执行有异常。
            <see cref="P:CoursePlatform.infrastructure.ApiResponse.Message"/> 表示异常的信息
            </remarks>
        </member>
        <member name="P:CoursePlatform.infrastructure.IAppUser.IsLogin">
            <summary>
            是否登录
            </summary>
        </member>
        <member name="T:CoursePlatform.infrastructure.Tools.FlakyId">
            <summary>
            IdGenerator from github https://github.com/joshclark/Flakey
            </summary>
        </member>
        <member name="T:CoursePlatform.infrastructure.Tools.ReturnVal`1">
            <summary>
            数据返回统一格式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CoursePlatform.infrastructure.Tools.ReturnVal`1.NextPage">
            <summary>
            当返回结果长度超过浏览器限制时，做数据分页使用
            </summary>
        </member>
        <member name="P:CoursePlatform.infrastructure.Tools.ReturnVal`1.ReturnCode">
            <summary>
            状态码,0 表示成功
            </summary>
        </member>
        <member name="P:CoursePlatform.infrastructure.Tools.ReturnVal`1.ReturnText">
            <summary>
            状态文本
            </summary>
        </member>
        <member name="P:CoursePlatform.infrastructure.Tools.ReturnVal`1.Result">
            <summary>
            具体数据
            </summary>
        </member>
        <member name="T:CoursePlatform.infrastructure.Utility.AsyncLazy`1">
            <summary>
                Provides support for lazy initialization in asyncronous manner.
            </summary>
            <typeparam name="T"> Specifies the type of object that is being lazily initialized. </typeparam>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.CacheProvider.Get``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
             using redis StringSet
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <param name="expire"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.CacheProvider.GetAsync(System.String,System.Type)">
            <summary>
            <inheritdoc/> using redis string get...
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.CacheProvider.GetAll``1(System.String)">
            <summary>
            <inheritdoc/> using redis hget...
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.CacheProvider.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.CacheProvider.Remove(System.String,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.CacheProvider.SetAsync(System.String,System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.Get``1(System.String,System.Func{System.Threading.Tasks.Task{``0}},System.Nullable{System.TimeSpan})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="func"></param>
            <param name="expire"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.Get``1(System.String)">
            <summary>
            从缓存中获取对象，不存在返回空
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.GetAsync(System.String,System.Type)">
            <summary>
            从缓存中获取对象，不存在返回空
            </summary>
            <param name="key">键</param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.GetAll``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.Remove(System.String,System.String[])">
            <summary>
            移除一个缓存对象
            </summary>
            <param name="key">缓存键</param>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.Remove(System.String)">
            <summary>
            从String Cache中移除对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.SetAsync(System.String,System.Object)">
            <summary>
            设置缓存对象
            </summary>
            <param name="key">键</param>
            <param name="obj">要缓存的对象</param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.RPopAsync``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.ICachingProvider.LPushXAsync``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.IRedisQueue.GetAsync``1(System.String)">
            <summary>
             获取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CoursePlatform.Infrastructure.Caching.IRedisQueue.SetAsync``1(``0,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
    </members>
</doc>
